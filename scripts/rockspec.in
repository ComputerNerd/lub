{% 
local lfs = require 'lfs'
local lub = require 'lub'
local platforms = {} -- 'linux', 'macosx', 'win32'
local platlibs = {
  linux   = "'rt'",
}
%}
package = "{{lib.type}}"
version = "{{lib.VERSION}}-1"
source = {
  url = 'https://github.com/lubyk/{{lib.type}}/archive/REL-{{lib.VERSION}}.tar.gz',
  dir = '{{lib.type}}-REL-{{lib.VERSION}}',
}
description = {
  summary = "Lubyk base module.",
  detailed = [[
    lub: helper code, class declaration.

    lub.Autoload: autoloading classes in modules.

    lub.Dir: a simple directory traversal class.

    lub.Template: a simple templating class that uses {{moustache}} like syntax.
  ]],
  homepage = "http://doc.lubyk.org/{{lib.type}}.html",
  license = "MIT"
}


{% -- DEFAULT TEMPLATE FOR MODULE WITH C++ %}
dependencies = {
{% for _, v in ipairs(lib.DEPENDS) do %}
  "{{v}}",
{% end %}
}
build = {
  type = 'builtin',
  modules = {
    -- Plain Lua files
    {{string.format("[%-17s] = '%s/%s.lua'", "'"..lib.type.."'", lib.type, 'init')}},
{% for file in lfs.dir(lib.type) do %}
{% if file ~= 'init.lua' and file:match('.lua$') then file = file:sub(1, -5) %}
    {{string.format("[%-17s] = '%s/%s.lua'", "'"..lib.type..'.'..file.."'", lib.type, file)}},
{% end %}
{% end %}
    -- C++ modules
    {{string.format("[%-17s] = ", "'"..lib.type..".core'")}}{
      sources = {
{% for path in lub.Dir('src'):glob '%.cpp' do %}
        '{{path}}',
{% end %}
      },
      incdirs = {'include', 'src/bind', 'src/vendor'},
      libraries = {'stdc++'},
    },
  },
{% if #platforms > 0 then %}
  platforms = {
{% for _, plat in ipairs(platforms) do %}
    {{plat}} = {
      modules = {
        ['lub.core'] = {
          sources = {
{% for path in lub.Dir('src/'..plat):glob '%.cpp' do %}
            '{{path}}',
{% end %}
          },
{% if platlibs[plat] then %}
          librairies = { {{platlibs[plat]}} },
{% end %}
        },
      },
    },
{% end %}
  },
{% end %}
}
